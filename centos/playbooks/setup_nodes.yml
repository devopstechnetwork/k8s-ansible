---
- hosts: all
  become: yes
  vars_files:
  - env_variables
  tasks:
  - name: Creating a k8s repository file
    file:
     path: /etc/yum.repos.d/kubernetes.repo
     state: touch

  - name: Adding the repo details in k8s repo config file
    blockinfile:
     path: /etc/yum.repos.d/kubernetes.repo
     block: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled=1
      gpgcheck=1
      repo_gpgcheck=1
      gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

  - name: Installing Docker and firewalld
    shell: |
     yum install firewalld -y
     yum install -y yum-utils device-mapper-persistent-data lvm2
     yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
     yum install docker-ce -y --nobest

  - name: Installing bind-utils
    shell: |
     sudo yum install -y bind-utils

  - name: Installing dnsmasq
    shell: |
     yum install -y dnsmasq

  - name: Install Python3
    shell: |
     yum install -y python3
   
  - pip:
      name: openshift

  - pip:
      name: kubernetes

  - name: Installing required packages
    yum:
     name: "{{ item }}"
     state: present
    with_items: "{{ packages }}"

  - name: Starting and enabling the services
    service:
     name: "{{ item }}"
     state: started
     enabled: yes
    with_items: "{{ services }}"

  - name: Allow ports in firewall demon
    firewalld:
     port: "{{ item }}"
     state: enabled
     permanent: yes
     immediate: yes
    with_items: "{{ ports }}"

  - name: Add IP address of all known nodes to /etc/hosts
    lineinfile:
      dest: /etc/hosts
      regexp: '.*{{ item }}$'
      line: "{{ hostvars[item].ansible_host }} {{item}}"
      state: present
    when: hostvars[item].ansible_host is defined
    with_items: "{{ groups.all }}"

  - name: Enabling firewall bridge rule
    shell: "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"

  - name: Enabling permanent firewall masquerade and public zone
    shell: firewall-cmd --zone=public --add-masquerade --permanent

  - name: Allow Network Ports in Firewalld
    firewalld:
     port: "{{ item }}"
     state: enabled
     permanent: yes
     immediate: yes
    with_items: "{{ ports }}"

  - name: Enabling cluster addresses in firewall 
    shell: firewall-cmd --zone=public --permanent --add-rich-rule 'rule family=ipv4 source address="{{ cidr_v }}" accept'
  
  - name: Reload the firewall rules
    shell: firewall-cmd --reload

  - name: Set IPv4 sysctl rules
    shell: sysctl -w net.ipv4.ip_forward=1

  - name: Set I6v6 sysctl rules
    shell: sysctl -w net.bridge.bridge-nf-call-ip6tables=1

  - name: Set IPv4 sysctl rules
    shell: sysctl -w net.bridge.bridge-nf-call-iptables=1

  - name: Reload sysctl rules
    shell: sysctl --system
