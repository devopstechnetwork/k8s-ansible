---
- hosts: kubernetes-master-nodes
  become: yes
  vars_files:
  - env_variables
  tasks:
  - name: Pulling k8s images for cluster setup
    shell: kubeadm config images pull

  - name: Reset kubeadm
    shell: kubeadm reset -f
    register: output

  - name: Init of k8s cluster
    shell: kubeadm init --apiserver-advertise-address {{ad_addr}} --pod-network-cidr={{cidr_v}}
    register: output

  - name: Storing Logs and the security token for later
    local_action: copy content={{ output.stdout }} dest={{ token_file }}

  - name: Copying the required config files
    shell: |
     mkdir -p $HOME/.kube
     sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
     sudo chown $(id -u):$(id -g) $HOME/.kube/config

  - name: Installing Flannel Pod Network
    command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

  - name: Create the cluster role binding
    command: kubectl create clusterrolebinding kubernetes-dashboard --clusterrole=cluster-admin --serviceaccount=kube-system:kubernetes-dashboard

  - name: Install the k8s Dashboard add-on
    command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml
    args:
       warn: false # set warn=false to prevent warning
    ignore_errors: true # ignore non-zero exit retVal of dashboard install routine

  - name: Create the dashboard admin cluster role binding
    command: kubectl create clusterrolebinding dashboard-admin-sa --clusterrole=cluster-admin --serviceaccount=default:dashboard-admin-sa

  - name: Create a cluster admin service account
    command: kubectl create serviceaccount dashboard -n default

  - name: Add the cluster binding rules to your dashboard account
    command: kubectl create clusterrolebinding dashboard-admin -n default \ --clusterrole=cluster-admin \ --serviceaccount=default:dashboard

  - name: Get the service account token
    shell: kubectl get secret $(kubectl get serviceaccount dashboard -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode
